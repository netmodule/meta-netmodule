From 13c6fc0565bb631bd3dd993f176da80ddb26aa2f Mon Sep 17 00:00:00 2001
From: David Andrey <david.andrey@netmodule.com>
Date: Fri, 7 Dec 2012 12:13:27 +0100
Subject: [PATCH 02/21] zynq: BSP: support for ZX3_PM3 board

Added basic support for Enclustra ZX3 Mars PM3 board

Signed-off-by:David Andrey david.andrey@netmodule.com
---
 board/enclustra/zx3_pm3/Makefile        |   56 ++++++
 board/enclustra/zx3_pm3/board.c         |  290 +++++++++++++++++++++++++++++++
 board/enclustra/zx3_pm3/lowlevel_init.S |  198 +++++++++++++++++++++
 boards.cfg                              |    1 +
 include/configs/zx3_pm3.h               |  110 ++++++++++++
 5 files changed, 655 insertions(+), 0 deletions(-)
 create mode 100644 board/enclustra/zx3_pm3/Makefile
 create mode 100644 board/enclustra/zx3_pm3/board.c
 create mode 100644 board/enclustra/zx3_pm3/lowlevel_init.S
 create mode 100644 include/configs/zx3_pm3.h

diff --git a/board/enclustra/zx3_pm3/Makefile b/board/enclustra/zx3_pm3/Makefile
new file mode 100644
index 0000000..dfb103a
--- /dev/null
+++ b/board/enclustra/zx3_pm3/Makefile
@@ -0,0 +1,56 @@
+#
+# (C) Copyright 2000-2006
+# Wolfgang Denk, DENX Software Engineering, wd@denx.de.
+#
+# See file CREDITS for list of people who contributed to this
+# project.
+#
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License as
+# published by the Free Software Foundation; either version 2 of
+# the License, or (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+# MA 02111-1307 USA
+#
+
+include $(TOPDIR)/config.mk
+ifneq ($(OBJTREE),$(SRCTREE))
+$(shell mkdir -p $(obj)../common)
+endif
+
+LIB	= $(obj)lib$(BOARD).o
+
+COBJS-y	:= board.o ../../xilinx/common/xbasic_types.o
+SOBJS	:= lowlevel_init.o
+
+COBJS	:= $(sort $(COBJS-y))
+
+SRCS	:= $(COBJS:.o=.c)
+OBJS	:= $(addprefix $(obj),$(COBJS))
+SOBJS	:= $(addprefix $(obj),$(SOBJS))
+
+$(LIB):	$(obj).depend $(OBJS) $(SOBJS)
+	$(call cmd_link_o_target, $(OBJS) $(SOBJS))
+
+clean:
+	rm -f $(SOBJS) $(OBJS)
+
+distclean:	clean
+	rm -f $(LIB) core *.bak $(obj).depend
+
+#########################################################################
+
+# defines $(obj).depend target
+include $(SRCTREE)/rules.mk
+
+sinclude $(obj).depend
+
+#########################################################################
diff --git a/board/enclustra/zx3_pm3/board.c b/board/enclustra/zx3_pm3/board.c
new file mode 100644
index 0000000..4f6e65e
--- /dev/null
+++ b/board/enclustra/zx3_pm3/board.c
@@ -0,0 +1,290 @@
+/*
+ * (C) Copyright 2012 Michal Simek <monstr@monstr.eu>
+ * (C) Copyright 2012 David Andrey <david.andrey@netmodule.com>
+ *
+ * based on Xilinx zynq_common/board.c
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#include <common.h>
+#include <asm/arch/mmc.h>
+#include <asm/arch/nand.h>
+#include <netdev.h>
+#include <zynqpl.h>
+
+#define BOOT_MODE_REG     (XPSS_SYS_CTRL_BASEADDR + 0x25C)
+#define BOOT_MODES_MASK    0x0000000F
+#define QSPI_MODE         (0x00000001)            /**< QSPI */
+#define NOR_FLASH_MODE    (0x00000002)            /**< NOR  */
+#define NAND_FLASH_MODE   (0x00000004)            /**< NAND */
+#define SD_MODE           (0x00000005)            /**< Secure Digital card */
+#define JTAG_MODE	  (0x00000000)		  /**< JTAG */
+
+DECLARE_GLOBAL_DATA_PTR;
+
+#define dmbp() __asm__ __volatile__ ("dmb" : : : "memory")
+
+void XIo_Out32(u32 OutAddress, u32 Value)
+{
+    *(volatile u32 *) OutAddress = Value;
+    dmbp();
+}
+
+u32 XIo_In32(u32 InAddress)
+{
+    volatile u32 temp = *(volatile u32 *)InAddress;
+    dmbp();
+    return temp;
+}
+
+#ifdef CONFIG_FPGA
+Xilinx_desc fpga = XILINX_XC7Z020_DESC(0);
+#endif
+
+int board_init(void)
+{
+	/* temporary hack to clear pending irqs before Linux as it
+	   will hang Linux */
+
+	XIo_Out32(0xe0001014, 0x26d);
+
+	/* temporary hack to take USB out of reset til the is fixed
+	   in Linux */
+
+	XIo_Out32(0xe000a204, 0x80);
+	XIo_Out32(0xe000a208, 0x80);
+	XIo_Out32(0xe000a040, 0x80);
+	XIo_Out32(0xe000a040, 0x00);
+	XIo_Out32(0xe000a040, 0x80);
+
+	icache_enable();
+
+#ifdef CONFIG_FPGA
+	fpga_init();
+	fpga_add(fpga_xilinx, &fpga);
+#endif
+
+	return 0;
+}
+
+int board_late_init (void)
+{
+#if 0   /* Linux boot mode is not same as FSBL */
+	u32 boot_mode;
+
+	boot_mode = (XIo_In32(BOOT_MODE_REG) & BOOT_MODES_MASK);
+	switch(boot_mode) {
+	case QSPI_MODE:
+		setenv("modeboot", "run qspiboot");
+		break;
+	case NAND_FLASH_MODE:
+		setenv("modeboot", "run nandboot");
+		break;
+	case NOR_FLASH_MODE:
+		setenv("modeboot", "run norboot");
+		break;
+	case SD_MODE:
+		setenv("modeboot", "run sdboot");
+		break;
+	case JTAG_MODE:
+		setenv("modeboot", "run jtagboot");
+		break;
+	default:
+		setenv("modeboot", "");
+		break;
+	}
+#endif
+
+	return 0;
+}
+
+/**
+ * Set pin muxing for NAND access
+ */
+static int set_mio_mux_nand(){
+#define SLCRBASE   0xF8000000
+#define MIOMUXBASE 0xF8000700
+#define NANDMUX0 0x0000001610
+#define NANDMUX 0x0000000610
+
+	XIo_Out32(0xF8000008, 0xDF0D); //unlock slcr
+
+	/* Define MuxIO for NAND */
+	/* Caution: overwrite some QSPI muxing !!! */
+	XIo_Out32(MIOMUXBASE, NANDMUX0);	/* Pin 0, NAND Flash Chip Select */
+	XIo_Out32(MIOMUXBASE+8, NANDMUX);	/* Pin 2, NAND Flash ALEn */
+	XIo_Out32(MIOMUXBASE+12, NANDMUX);	/* Pin 3, NAND WE_B */
+	XIo_Out32(MIOMUXBASE+16, NANDMUX);	/* Pin 4, NAND Flash IO Bit 2 */
+	XIo_Out32(MIOMUXBASE+20, NANDMUX);	/* Pin 5, NAND Flash IO Bit 0 */
+	XIo_Out32(MIOMUXBASE+24, NANDMUX);	/* Pin 6, NAND Flash IO Bit 1 */
+	XIo_Out32(MIOMUXBASE+28, NANDMUX);	/* Pin 7, NAND Flash CLE_B */
+	XIo_Out32(MIOMUXBASE+32, NANDMUX);	/* Pin 8, NAND Flash RD_B */
+	XIo_Out32(MIOMUXBASE+36, NANDMUX);	/* Pin 9, NAND Flash IO Bit 4 */
+	XIo_Out32(MIOMUXBASE+40, NANDMUX);	/* Pin 10, NAND Flash IO Bit 5 */
+	XIo_Out32(MIOMUXBASE+44, NANDMUX);	/* Pin 11, NAND Flash IO Bit 6 */
+	XIo_Out32(MIOMUXBASE+48, NANDMUX);	/* Pin 12, NAND Flash IO Bit 7 */
+	XIo_Out32(MIOMUXBASE+52, NANDMUX);	/* Pin 13, NAND Flash IO Bit 3 */
+	XIo_Out32(MIOMUXBASE+56, NANDMUX);	/* Pin 14, NAND Flash Busy */
+
+	XIo_Out32(0xF8000004, 0x767B); //lock slcr
+}
+
+
+/**
+ * Set the pin muxing for QSPI NOR access
+ */
+static int set_mio_mux_qspi(){
+#define SLCRBASE   0xF8000000
+#define MIOMUXBASE 0xF8000700
+#define QSPIMUX 0x0000000602
+
+	XIo_Out32(0xF8000008, 0xDF0D); //unlock slcr
+
+	/* Define MuxIO for QSPI */
+	/* Caution: overwrite some NAND muxing !!! */
+	XIo_Out32(MIOMUXBASE,   0x00001600);	/* Pin 0, Level 3 Mux */
+	XIo_Out32(MIOMUXBASE+4, 0x00001602);	/* Pin 1, Quad SPI 0 Chip Select */
+	XIo_Out32(MIOMUXBASE+8, QSPIMUX);		/* Pin 2, Quad SPI 0 IO Bit 0 */
+	XIo_Out32(MIOMUXBASE+12, QSPIMUX);		/* Pin 3, Quad SPI 0 IO Bit 1 */
+	XIo_Out32(MIOMUXBASE+16, QSPIMUX);		/* Pin 4, Quad SPI 0 IO Bit 2 */
+	XIo_Out32(MIOMUXBASE+20, QSPIMUX);		/* Pin 5, Quad SPI 0 IO Bit 3 */
+	XIo_Out32(MIOMUXBASE+24, QSPIMUX);		/* Pin 6, Quad SPI 0 Clock */
+	XIo_Out32(MIOMUXBASE+28, QSPIMUX);		/* Pin 7, Reserved*/
+	XIo_Out32(MIOMUXBASE+32, QSPIMUX);		/* Pin 8, Quad SPI Feedback Clock */
+	XIo_Out32(MIOMUXBASE+36, 0x00001600);	/* Pin 9, Level mux -> disable */
+	XIo_Out32(MIOMUXBASE+40, 0x00001600);	/* Pin 10, Level mux -> disable */
+	XIo_Out32(MIOMUXBASE+44, 0x00001600);	/* Pin 11, Level mux -> disable */
+	XIo_Out32(MIOMUXBASE+48, 0x00001600);	/* Pin 12, Level mux -> disable */
+	XIo_Out32(MIOMUXBASE+52, 0x00001600);	/* Pin 13, Level mux -> disable */
+	XIo_Out32(MIOMUXBASE+56, 0x00001600);	/* Pin 14, Level mux -> disable */
+
+	XIo_Out32(0xF8000004, 0x767B); //lock slcr
+}
+
+static int zx3_current_storage = ZX3_NONE;
+
+void zx3_set_storage (int store) {
+
+	if (store == zx3_current_storage)
+		return;
+
+	switch (store)
+	{
+		case ZX3_NAND:
+			set_mio_mux_nand ();
+			zx3_current_storage = ZX3_NAND;
+			break;
+		case ZX3_QSPI:
+			set_mio_mux_qspi();
+			zx3_current_storage = ZX3_QSPI;
+			break;
+		default:
+			zx3_current_storage = ZX3_NONE;
+			break;
+	}
+}
+
+
+
+#ifdef CONFIG_CMD_NET
+int board_eth_init(bd_t *bis)
+{
+	u32 ret = 0;
+
+#ifdef CONFIG_XILINX_AXIEMAC
+	ret |= xilinx_axiemac_initialize(bis, XILINX_AXIEMAC_BASEADDR,
+						XILINX_AXIDMA_BASEADDR);
+#endif
+#ifdef CONFIG_XILINX_EMACLITE
+	u32 txpp = 0;
+	u32 rxpp = 0;
+# ifdef CONFIG_XILINX_EMACLITE_TX_PING_PONG
+	txpp = 1;
+# endif
+# ifdef CONFIG_XILINX_EMACLITE_RX_PING_PONG
+	rxpp = 1;
+# endif
+	ret |= xilinx_emaclite_initialize(bis, XILINX_EMACLITE_BASEADDR,
+			txpp, rxpp);
+#endif
+
+#if defined(CONFIG_ZYNQ_GEM)
+# if defined(CONFIG_ZYNQ_GEM_BASEADDR0)
+	ret |= zynq_gem_initialize(bis, CONFIG_ZYNQ_GEM_BASEADDR0);
+# endif
+# if defined(CONFIG_ZYNQ_GEM_BASEADDR1)
+	ret |= zynq_gem_initialize(bis, CONFIG_ZYNQ_GEM_BASEADDR1);
+# endif
+#endif
+
+#ifdef CONFIG_ZYNQ_GEM_OLD
+	ret |= zynq_gem_initialize_old(bis);
+#endif
+
+	return ret;
+}
+#endif
+
+#ifdef CONFIG_CMD_MMC
+int board_mmc_init(bd_t *bd)
+{
+	return zynq_mmc_init(bd);
+}
+#endif
+
+#ifdef CONFIG_CMD_NAND
+int board_nand_init(struct nand_chip *nand_chip)
+{
+	zx3_set_storage(ZX3_NAND);
+	return zynq_nand_init(nand_chip);
+}
+#endif
+
+int dram_init(void)
+{
+	gd->ram_size = get_ram_size((void *)CONFIG_SYS_SDRAM_BASE,
+							CONFIG_SYS_SDRAM_SIZE);
+	gd->bd->bi_dram[0].start = CONFIG_SYS_SDRAM_BASE;
+	gd->bd->bi_dram[0].size = CONFIG_SYS_SDRAM_SIZE;
+
+	return 0;
+}
+
+/*
+ * OK, and resets too.
+ */
+void reset_cpu(ulong addr)
+{
+	u32 *slcr_p;
+
+	slcr_p = (u32*)XPSS_SYS_CTRL_BASEADDR;
+
+	/* unlock SLCR */
+	*(slcr_p + 2) = 0xDF0D;
+	/* Clear 0x0F000000 bits of reboot status register to workaround
+	 * the FSBL not loading the bitstream after soft reset
+	 * This is a temporary solution until we know more.
+	 */
+	XIo_Out32(XPSS_SYS_CTRL_BASEADDR + 0x258, (XIo_In32(XPSS_SYS_CTRL_BASEADDR + 0x258) & 0xF0FFFFFF));
+	/* Tickle soft reset bit */
+	*(slcr_p + 128) = 1;
+
+	while(1) {;}
+}
diff --git a/board/enclustra/zx3_pm3/lowlevel_init.S b/board/enclustra/zx3_pm3/lowlevel_init.S
new file mode 100644
index 0000000..3524f1f
--- /dev/null
+++ b/board/enclustra/zx3_pm3/lowlevel_init.S
@@ -0,0 +1,198 @@
+
+/*
+ * This black box is a direct translation of init_ddrc.tcl.
+ * The Zynq DDR controller is initialized herein.
+ * It needs lots of love and attention some day.
+ */
+
+#include <config.h>
+
+.globl lowlevel_init
+lowlevel_init:
+
+	# unlock SLCR
+	ldr r1, =(XPSS_SYS_CTRL_BASEADDR + 8)
+	ldr r2, =0xDF0D
+	str r2, [r1]
+
+	# remap DDR to zero
+	# FILTERSTART
+	ldr r1, =(XPSS_SCU_BASEADDR + 0x40)
+	ldr r2, =0
+	str r2, [r1]
+
+	# Device config APB
+	# unlock the PCAP
+	ldr r1, =(XPSS_DEV_CFG_APB_BASEADDR + 0x34)
+	ldr r2, =0x757BDF0D
+	str r2, [r1]
+	ldr r1, =(XPSS_DEV_CFG_APB_BASEADDR + 0x28)
+	ldr r2, =0xFFFFFFFF
+	str r2, [r1]
+
+	# OCM_CFG
+	# Mask out the ROM
+	# map ram into upper addresses
+	ldr r1, =(XPSS_SYS_CTRL_BASEADDR +0x910)
+	ldr r2, =0x1F
+	str r2, [r1]
+
+	# FPGA_RST_CTRL
+	# clear resets on AXI fabric ports
+	ldr r1, =(XPSS_SYS_CTRL_BASEADDR + 0x240)
+	ldr r2, =0x0
+	str r2, [r1]
+
+	# TZ_DDR_RAM
+	# Set DDR trust zone non-secure
+	ldr r1, =(XPSS_SYS_CTRL_BASEADDR + 0x430)
+	ldr r2, =0xFFFFFFFF
+	str r2, [r1]
+
+	# set urgent bits with register
+	ldr r1, =(XPSS_SYS_CTRL_BASEADDR + 0x61C)
+	ldr r2, =0
+	str r2, [r1]
+
+	# urgent write, ports S2/S3
+	ldr r1, =(XPSS_SYS_CTRL_BASEADDR + 0x600)
+	ldr r2, =0xC
+	str r2, [r1]
+
+	# relock SLCR
+	ldr r1, =(XPSS_SYS_CTRL_BASEADDR + 0x4)
+	ldr r2, =0x767B
+	str r2, [r1]
+
+#ifdef CONFIG_EP107
+	# this should not be needed after EP107
+
+	# Do nothing if DDR already running
+	ldr r1, =(XPSS_DDR_CTRL_BASEADDR + 0)
+	ldr r2, [r1]
+	ldr r3, =0x201
+	cmp r2, r3
+	bne doit
+#endif
+	mov pc, lr
+
+doit:
+	# Reset DDR controller
+	ldr r1, =(XPSS_DDR_CTRL_BASEADDR + 0)
+	ldr r2, =0x200
+	str r2, [r1]
+
+	ldr r1, =(XPSS_DDR_CTRL_BASEADDR + 0x4)
+	ldr r2, =0x000C1061
+	str r2, [r1]
+
+	ldr r1, =(XPSS_DDR_CTRL_BASEADDR + 0xC)
+	ldr r2, =0x03001001
+	str r2, [r1]
+
+	ldr r1, =(XPSS_DDR_CTRL_BASEADDR + 0x10)
+	ldr r2, =0x00014001
+	str r2, [r1]
+
+	ldr r1, =(XPSS_DDR_CTRL_BASEADDR + 0x14)
+	ldr r2, =0x0004e020
+	str r2, [r1]
+
+	ldr r1, =(XPSS_DDR_CTRL_BASEADDR + 0x18)
+	ldr r2, =0x36264ccf
+	str r2, [r1]
+
+	ldr r1, =(XPSS_DDR_CTRL_BASEADDR + 0x1C)
+	ldr r2, =0x820158a4
+	str r2, [r1]
+
+	ldr r1, =(XPSS_DDR_CTRL_BASEADDR + 0x20)
+	ldr r2, =0x250882c4
+	str r2, [r1]
+
+	ldr r1, =(XPSS_DDR_CTRL_BASEADDR + 0x28)
+	ldr r2, =0x00809004
+	str r2, [r1]
+
+	ldr r1, =(XPSS_DDR_CTRL_BASEADDR + 0x2C)
+	ldr r2, =0x00000000
+	str r2, [r1]
+
+	ldr r1, =(XPSS_DDR_CTRL_BASEADDR + 0x30)
+	ldr r2, =0x00040952
+	str r2, [r1]
+
+	ldr r1, =(XPSS_DDR_CTRL_BASEADDR + 0x34)
+	ldr r2, =0x00020022
+	str r2, [r1]
+
+#if (XPAR_MEMORY_MB_SIZE == 256)
+/*
+ * starting with PEEP8 designs, there is 256 MB
+ */
+	ldr r1, =(XPSS_DDR_CTRL_BASEADDR + 0x3C)
+	ldr r2, =0x00000F88
+	str r2, [r1]
+
+	ldr r1, =(XPSS_DDR_CTRL_BASEADDR + 0x40)
+	ldr r2, =0xFF000000
+	str r2, [r1]
+
+	ldr r1, =(XPSS_DDR_CTRL_BASEADDR + 0x44)
+	ldr r2, =0x0FF66666
+	str r2, [r1]
+#endif
+
+	ldr r1, =(XPSS_DDR_CTRL_BASEADDR + 0x50)
+	ldr r2, =0x00000256
+	str r2, [r1]
+
+	ldr r1, =(XPSS_DDR_CTRL_BASEADDR + 0x5C)
+	ldr r2, =0x00002223
+	str r2, [r1]
+
+	ldr r1, =(XPSS_DDR_CTRL_BASEADDR + 0x64)
+	ldr r2, =0x00020FE0
+	str r2, [r1]
+
+	ldr r1, =(XPSS_DDR_CTRL_BASEADDR + 0xA4)
+	ldr r2, =0x10200800
+	str r2, [r1]
+
+	ldr r1, =(XPSS_DDR_CTRL_BASEADDR + 0xB8)
+	ldr r2, =0x00200065
+	str r2, [r1]
+
+	ldr r1, =(XPSS_DDR_CTRL_BASEADDR + 0x17C)
+	ldr r2, =0x00000050
+	str r2, [r1]
+
+	ldr r1, =(XPSS_DDR_CTRL_BASEADDR + 0x180)
+	ldr r2, =0x00000050
+	str r2, [r1]
+
+	ldr r1, =(XPSS_DDR_CTRL_BASEADDR + 0x184)
+	ldr r2, =0x00000050
+	str r2, [r1]
+
+	ldr r1, =(XPSS_DDR_CTRL_BASEADDR + 0x188)
+	ldr r2, =0x00000050
+	str r2, [r1]
+
+	ldr r1, =(XPSS_DDR_CTRL_BASEADDR + 0x200)
+	ldr r2, =0x00000000
+	str r2, [r1]
+
+	ldr r1, =(XPSS_DDR_CTRL_BASEADDR + 0x0)
+	ldr r2, =0x201
+	str r2, [r1]
+
+# Delay spin loop
+	ldr r4, =0x1000000
+loop:
+	sub r4, r4, #1
+	cmp r4, #0
+	bne loop
+
+	mov pc, lr
+
diff --git a/boards.cfg b/boards.cfg
index 2382d29..adca12c 100644
--- a/boards.cfg
+++ b/boards.cfg
@@ -279,6 +279,7 @@ zynq_zc70x                   arm         armv7       zynq                xilinx
 zynq_cseflash                arm         armv7       zynq                xilinx         zynq
 zynq_zed                     arm         armv7       zynq                xilinx         zynq
 zynq4ethernet                arm         armv7       zynq4ethernet       netmodule      zynq
+zx3_pm3                      arm         armv7       zx3_pm3             enclustra      zynq
 omap5_evm                    arm         armv7       omap5_evm           ti		omap5
 s5p_goni                     arm         armv7       goni                samsung        s5pc1xx
 smdkc100                     arm         armv7       smdkc100            samsung        s5pc1xx
diff --git a/include/configs/zx3_pm3.h b/include/configs/zx3_pm3.h
new file mode 100644
index 0000000..9d187af
--- /dev/null
+++ b/include/configs/zx3_pm3.h
@@ -0,0 +1,110 @@
+/*
+ * (C) Copyright 2012 Xilinx
+ * (C) Copyright 2012 NetModule
+ *
+ * Configuration for Enclustra Zynq Mars Board - ZX3-PM3
+ * See zynq_common.h for Zynq common configs
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#ifndef __CONFIG_ZYNQ4ETHERNET_H
+#define __CONFIG_ZYNQ4ETHERNET_H
+
+#define PHYS_SDRAM_1_SIZE (256 * 1024 * 1024)
+
+#define CONFIG_ZYNQ_SERIAL_UART1
+
+#define CONFIG_ZYNQ_GEM0
+#define CONFIG_PHY_MICREL
+#define CONFIG_PHY_ADDR 3
+
+#define CONFIG_CMD_NET
+#define CONFIG_CMD_MII      /* mii utils */
+
+#define CONFIG_SYS_NO_FLASH
+
+#define CONFIG_ZYNQ_SPI
+#define CONFIG_NAND_ZYNQ
+
+#include <configs/zynq_common.h>
+
+#undef CONFIG_EXTRA_ENV_SETTINGS
+#define CONFIG_EXTRA_ENV_SETTINGS   \
+    "ethaddr=00:0a:35:00:01:22\0"   \
+    "kernel_image=uImage\0" \
+    "ramdisk_image=uramdisk.image.gz\0" \
+    "devicetree_image=devicetree.dtb\0" \
+    "kernel_size=0x2E0000\0"    \
+    "ramdisk_size=0x600000\0"   \
+    "devicetree_size=0x10000\0" \
+    "nand_kernel_size=0x2E0000\0"   \
+    "nand_devicetree_size=0x10000\0" \
+    "fdt_high=0x20000000\0" \
+    "initrd_high=0x20000000\0"  \
+    "nandargs=setenv bootargs console=ttyPS0,115200 " \
+        "root=ubi0:ubi-rootfs rw " \
+        "rootfstype=ubifs " \
+        "ubi.mtd=nand-rootfs " \
+        "ip=:::::eth0:off " \
+        "$othbootargs " \
+        "earlyprintk\0" \
+    "ramargs=setenv bootargs console=ttyPS0,115200 " \
+        "root=/dev/ram rw " \
+        "ip=:::::eth0:off " \
+        "$othbootargs " \
+        "earlyprintk\0" \
+    "prodboot=echo Booting on NAND...;" \
+        "nand read 0x3000000 0x000000 ${nand_kernel_size};" \
+        "nand read 0x2A00000 0x500000 ${nand_devicetree_size};" \
+        "run nandargs;" \
+        "bootm 0x3000000 - 0x2A00000\0" \
+    "rescboot=echo Booting on QSPI Flash...;" \
+        "sf probe;" \
+        "sf read 0x3000000 0x600000 ${kernel_size};" \
+        "sf read 0x2A00000 0x900000 ${devicetree_size};" \
+        "sf read 0x2000000 0xA00000 ${ramdisk_size};" \
+        "nand device 0;" \
+        "run ramargs;" \
+        "bootm 0x3000000 0x2000000 0x2A00000;\0" \
+    "jtagboot=echo Booting on TFTP...;" \
+        "tftp 0x3000000 ${kernel_image};" \
+        "tftp 0x2A00000 ${devicetree_image};" \
+        "tftp 0x2000000 ${ramdisk_image};" \
+        "run ramargs;" \
+        "bootm 0x3000000 0x2000000 0x2A00000\0" \
+    "modeboot=run prodboot\0"
+
+
+#undef CONFIG_BOOTDELAY
+#define CONFIG_BOOTDELAY    -1 /* -1 to Disable autoboot */
+
+#define CONFIG_SYS_LONGHELP     /* undef to save memory */
+
+#define CONFIG_ENV_OVERWRITE
+
+#undef CONFIG_SYS_MAXARGS
+#define CONFIG_SYS_MAXARGS 32
+
+#define ZX3_NONE    (0)
+#define ZX3_NAND    (1)
+#define ZX3_QSPI    (2)
+
+#undef CONFIG_ZYNQ_SERIAL_CLOCK1
+#define CONFIG_ZYNQ_SERIAL_CLOCK1 0x5f5e100
+
+#undef CONFIG_IPADDR
+#undef CONFIG_SERVERIP
+
+#undef CONFIG_SYS_PROMPT
+#define CONFIG_SYS_PROMPT   "zx3-uboot> "
+
+#endif /* __CONFIG_ZYNQ4ETHERNET_H */
-- 
1.7.4.1

